Documentation
-------------
import ardent

ARDENT is composed of 2 modules
— 1) DataDL: for the computation of data-driven detection limits.
Output: a) Data-driven_95MassLimits.dat: a file with the 95% mass detection limits (col 1: P, col 2: M) b) Injection-recovery_tests.dat: a file with all the injection-recovery results.

When calling this function, one need to specify some information to compute the detection limits.
    Arguments
    ---------
    sys_name (string): the name of the system under study.
    rvFile (string): file name of the RV residual timeseries, i.e. RV with the Keplerians of known planets removed.
    Mstar (float): stellar mass [M_Sun]
    rangeP, rangeK (list of floats): minimum and maximum orbital periods and RV semi-amplitudes with which to inject a planet (rangeP=[Pmin,Pmax] units of [days] and rangeK=[Kmin,Kmax] units of [RV rms])
    Nsamples (int, optional): the number of injected planets in the 2D space (P, M) at a given orbital phase
    Nphases (int, optional): the number of different orbital phases with which to inject a given planet in the 2D space (P, M). The phase is then spread evenly in [0, 2pi[. The total number of injection-recovery tests corresponds to Nsamples*Nphases.
    fapLevel (float, optional): the FAP threshold under which we consider a signal as significant in the GLS periodogram.
    nbins (int, optional): the number of period bins with which to output the 95% mass detection limits.
    plot (bool, optional): plot the result. default=True.

— 2) DynDL: for the computation of the dynamical detection limits
Output: a) Final_DynamicalDetectLim.dat: a file with the refined detection limits (data+stability-driven) b) AllStabilityRates.dat: a file with the stability results of all the (P, M) combinations explored

    Arguments
    ---------
    shift (int): index indicating at which value of the period one computes the dynamical detection limits (for parallel computations)
    Nplanets (int): the number of known planets in the system (not counting for the injected one)
    param_file (string): name of the parameters file
    DataDrivenLimitsFile (string): name of the data-driven detection limits file (i.e. the output of module 1)

If the user wishes to use module 2, they have to run module 1 first because they need the data-driven detection limits (Data-driven_95MassLimits.dat).


Needed Python packages
----------------------
+ numpy
+ matplotlib
+ rebound and reboundx
—> For these 2, I recommend installing rebound-4.4.3 and reboundx-4.3.0 together with Python-3.11.3
+ joblib
+ tqdm
+ PyAstronomy

I recommend creating an anaconda environment with Python 3.11.3, rebound-4.4.3, and reboundx-4.3.0, and install all the other packages as listed above. Here is how to proceed:
***
conda create -n venv_ardent python=3.11.3
conda activate venv_ardent
pip install numpy
pip install rebound==4.4.3
pip install reboundx==4.3.0
pip install matplotlib
…
***
